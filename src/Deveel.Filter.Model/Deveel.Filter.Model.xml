<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Deveel.Filter.Model</name>
    </assembly>
    <members>
        <member name="T:Deveel.Filters.Filter">
            <summary>
            Represents a default implementation of a filter that 
            can be used to restrict the result of a query.
            </summary>
        </member>
        <member name="P:Deveel.Filters.Filter.FilterType">
            <summary>
            Gets the type of filter.
            </summary>
        </member>
        <member name="F:Deveel.Filters.Filter.Empty">
            <summary>
            An empty filter that has no effect on the result.
            </summary>
        </member>
        <member name="M:Deveel.Filters.Filter.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Deveel.Filters.Filter.Unary(Deveel.Filters.Filter,Deveel.Filters.FilterType)">
            <summary>
            Creates a new unary filter with the given operand and filter type.
            </summary>
            <param name="operand">
            The operand of the unary filter.
            </param>
            <param name="filterType">
            The type of the unary filter.
            </param>
            <returns>
            Returns a new <see cref="T:Deveel.Filters.UnaryFilter"/> with the given operand and
            of the given type.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="filterType"/> is not a unary filter type.
            </exception>
        </member>
        <member name="M:Deveel.Filters.Filter.Not(Deveel.Filters.Filter)">
            <summary>
            Creates an unary filter that negates the given operand.
            </summary>
            <param name="operand">
            The filter operand to negate.
            </param>
            <returns>
            Returns a new <see cref="T:Deveel.Filters.UnaryFilter"/> that negates the given
            filter operand.
            </returns>
        </member>
        <member name="M:Deveel.Filters.Filter.Binary(Deveel.Filters.Filter,Deveel.Filters.Filter,Deveel.Filters.FilterType)">
            <summary>
            Creates a new binary filter with the given left and right operands
            </summary>
            <param name="left">
            The left operand of the binary filter.
            </param>
            <param name="right">
            The right operand of the binary filter.
            </param>
            <param name="filterType">
            The type of the binary filter.
            </param>
            <returns>
            Returns a new <see cref="T:Deveel.Filters.BinaryFilter"/> of the given type with 
            the given left and right operands.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="filterType"/> is not a valid binary filter type.
            </exception>
        </member>
        <member name="T:Deveel.Filters.FilterEvaluationException">
            <summary>
            An exception thrown when the evaluation of
            a filter fails
            </summary>
        </member>
        <member name="M:Deveel.Filters.FilterEvaluationException.#ctor">
            <summary>
            Initializes a new instance of the exception.
            </summary>
        </member>
        <member name="M:Deveel.Filters.FilterEvaluationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception with a
            message that describes the error.
            </summary>
            <param name="message">
            A message that describes the error.
            </param>
        </member>
        <member name="M:Deveel.Filters.FilterEvaluationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception with a
            message that describes the error and the exception
            that caused it.
            </summary>
            <param name="message">
            A message that describes the error.
            </param>
            <param name="innerException">
            The exception that caused the error.
            </param>
        </member>
        <member name="T:Deveel.Filters.FilterException">
            <summary>
            An exception thrown when a filter is not valid.
            </summary>
        </member>
        <member name="M:Deveel.Filters.FilterException.#ctor">
            <summary>
            Constructs the exception.
            </summary>
        </member>
        <member name="M:Deveel.Filters.FilterException.#ctor(System.String)">
            <summary>
            Constructs the exception with the given message.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Deveel.Filters.FilterException.#ctor(System.String,System.Exception)">
            <summary>
            Constructs the exception with the given message and inner exception.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception of this exception.</param>
        </member>
        <member name="M:Deveel.Filters.FilterExtensions.AsLambda``1(Deveel.Filters.IFilter,System.String)">
            <summary>
            Produces a lambda expression that represents the filter
            </summary>
            <typeparam name="T">
            The type of the parameter of the expression.
            </typeparam>
            <param name="parameterName">
            The name of the parameter to use in the expression. 
            <strong>Note</strong>: this name must match the variable references
            in the filter.
            </param>
            <returns>
            Returns a <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the
            expression tree of the filter, that can be used to compile a delegate.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="parameterName"/> is <c>null</c> or empty.
            </exception>
        </member>
        <member name="M:Deveel.Filters.FilterExtensions.AsLambda(Deveel.Filters.IFilter,System.Type,System.String)">
            <summary>
            Produces a lambda expression that represents the filter
            </summary>
            <param name="filter">
            The filter to convert to a lambda expression.
            </param>
            <param name="parameterType">
            The type of the parameter of the expression.
            </param>
            <param name="parameterName">
            The name of the parameter to use in the expression. 
            <strong>Note</strong>: this name must match the variable references
            in the filter.
            </param>
            <returns>
            Returns a <see cref="T:System.Linq.Expressions.LambdaExpression"/> that represents the
            expression tree of the filter, that can be used to compile a delegate.
            </returns>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="parameterName"/> is <c>null</c> or empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="parameterType"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Deveel.Filters.FilterExtensions.AsAsyncLambda(Deveel.Filters.IFilter,System.Type,System.String)">
            <summary>
            Produces an asynchrounous lambda expression that represents the filter
            </summary>
            <param name="parameterType">
            The type of the parameter of the expression.
            </param>
            <param name="parameterName">
            The name of the parameter to use in the expression. 
            <strong>Note</strong>: this name must match the variable references
            in the filter.
            </param>
            <returns>
            Returns a <see cref="T:System.Linq.Expressions.LambdaExpression"/> that represents the
            expression tree of the filter, that can be used to compile an asynchrouns delegate.
            </returns>
        </member>
        <member name="M:Deveel.Filters.FilterExtensions.AsAsyncLambda``1(Deveel.Filters.IFilter,System.String)">
            <summary>
            Produces an asynchrounous lambda expression that represents the filter
            </summary>
            <typeparam name="T">
            The type of the parameter of the expression.
            </typeparam>
            <param name="parameterName">
            The name of the parameter to use in the expression. 
            <strong>Note</strong>: this name must match the variable references
            in the filter.
            </param>
            <returns>
            Returns a <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the
            expression tree of the filter, that can be used to compile an asynchrouns delegate.
            </returns>
        </member>
        <member name="M:Deveel.Filters.FilterExtensions.Evaluate(Deveel.Filters.IFilter,System.Type,System.String,System.Object)">
            <summary>
            Compiles and evaluates the filter against the given parameter value.
            </summary>
            <param name="parameterType">
            The type of the parameter to use in the evaluation.
            </param>
            <param name="parameterName">
            The name of the parameter to use in the evaluation.
            </param>
            <param name="parameterValue">
            The value of the parameter to use in the evaluation.
            </param>
            <returns>
            Returns <c>true</c> if the given value matches the filter, otherwise
            it returns <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="parameterType"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="parameterName"/> is <c>null</c> or empty.
            </exception>
            <exception cref="T:Deveel.Filters.FilterEvaluationException">
            Thrown when the filter cannot be evaluated because of an
            unhandled error.
            </exception>
        </member>
        <member name="M:Deveel.Filters.FilterExtensions.Evaluate(Deveel.Filters.IFilter,System.Type,System.Object)">
            <summary>
            Compiles and evaluates the filter against the given parameter value.
            </summary>
            <param name="parameterType">
            The type of the parameter to use in the evaluation.
            </param>
            <param name="parameterValue">
            The value of the parameter to use in the evaluation.
            </param>
            <returns>
            Returns <c>true</c> if the given value matches the filter, otherwise
            </returns>
        </member>
        <member name="T:Deveel.Filters.FilterType">
            <summary>
            Enumerates the types of filters that are known
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.Equals">
            <summary>
            A filter that compares two parties for equality
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.NotEquals">
            <summary>
            A filter that compares two parties for inequality
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.GreaterThan">
            <summary>
            Compares two parties to determine if the first part is greater 
            than the second one.
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.GreaterThanOrEqual">
            <summary>
            Compares two parties to determine if the first part is greater
            or equal to the second one.
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.LessThan">
            <summary>
            Compares two parties to determine if the first part is less than
            the second one.
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.LessThanOrEqual">
            <summary>
            Compares two parties to determine if the first part is less than
            or equal to the second one.
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.And">
            <summary>
            A logical AND between two filters
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.Or">
            <summary>
            A logical OR between two filters
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.Not">
            <summary>
            An unary filter that negates the result of another filter
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.Function">
            <summary>
            The invocation of a function that returns a boolean value
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.Constant">
            <summary>
            A constant and immutable value.
            </summary>
        </member>
        <member name="F:Deveel.Filters.FilterType.Variable">
            <summary>
            The reference to a variable in the filter context.
            </summary>
        </member>
        <member name="T:Deveel.Filters.FunctionFilter">
            <summary>
            The invocation to a function that returns a
            boolean for filtering
            </summary>
        </member>
        <member name="P:Deveel.Filters.FunctionFilter.FunctionName">
            <summary>
            Gets the name of the function to invoke, that is
            defined by the object refereced by <see cref="P:Deveel.Filters.FunctionFilter.Variable"/>
            </summary>
        </member>
        <member name="P:Deveel.Filters.FunctionFilter.Variable">
            <summary>
            Gets the variable that references the object that
            defines the function to invoke
            </summary>
        </member>
        <member name="P:Deveel.Filters.FunctionFilter.Arguments">
            <summary>
            Gets the arguments to pass to the function.
            </summary>
        </member>
        <member name="P:Deveel.Filters.FunctionFilter.FilterType">
            <inheritdoc/>
        </member>
        <member name="T:Deveel.Filters.IFilter">
            <summary>
            Defines the contract for a filter that can be applied to a
            set to select a subset of.
            </summary>
        </member>
        <member name="P:Deveel.Filters.IFilter.FilterType">
            <summary>
            Gets the type of the filter.
            </summary>
        </member>
    </members>
</doc>
